---
import Layout from '../layouts/Layout.astro'
import { getTodos } from './api-client/get-todos-client'

// simply fetch in SSR mode
// this doesn't work in SSG / output: "static" case!
// you'd need to fetch the todo's in frontend <script> code then
const todos = await getTodos()
---

<Layout title="Welcome to Astro.">
  <main>
    <h1><span class="text-gradient">@jsheaven/astro-client-generator</span></h1>

    <p class="instructions">
      Find the API endpoints implemented in <code>src/pages/api/*.ts</code>.<br />
      <strong>Code Challenge:</strong> Checkout the generated <code>src/pages/api-client/*</code> files and
      <code>src/pages/index.astro</code> and how the API client generation works.
    </p>

    <h3>My TODOs:</h3>
    {
      // render todos
      todos.todos.map((todo) => (
        <li>
          <input
            type="checkbox"
            name="todo-is-done"
            data-todo={JSON.stringify(todo)}
            aria-checked={todo.isDone ? 'true' : 'false'}
            checked={todo.isDone}
          />
          {todo.task}
          <button name="todo-delete" data-todo={JSON.stringify(todo)}>
            Delete
          </button>
        </li>
      ))
    }
    <p class="instructions">
      <span class="text-gradient"><strong>Add another TODO:</strong></span>
      <input id="add-todo-input" type="text" value="" placeholder="My new todo..." />
      <button id="add-todo-button">Add</button>
    </p>

    <script>
      const { createTodo } = await import('./api-client/create-todo-client')
      const { removeTodo } = await import('./api-client/remove-todo-client')
      const { updateTodo } = await import('./api-client/update-todo-client')

      // === add todo
      const addBtn = document.querySelector('#add-todo-button') as HTMLButtonElement
      const addInput = document.querySelector('#add-todo-input') as HTMLInputElement

      const onAddTodo = async () => {
        await createTodo({
          isDone: false,
          task: addInput.value,
        })
        document.location.reload()
      }

      addBtn.onclick = () => {
        onAddTodo()
      }

      addInput.onkeyup = (evt) => {
        if (evt.key === 'Enter') {
          onAddTodo()
        }
      }
      addInput.focus()

      // === update todo
      const allIsDoneCheckboxes = document.querySelectorAll('input[name=todo-is-done]') as NodeListOf<HTMLInputElement>

      allIsDoneCheckboxes.forEach(
        (isDoneCheckbox) =>
          (isDoneCheckbox.onclick = async (evt) => {
            const checkbox = evt.target as HTMLInputElement
            const todo = JSON.parse(checkbox.getAttribute('data-todo'))

            todo.isDone = checkbox.checked

            await updateTodo(todo)
            document.location.reload()
          }),
      )

      // remove todo
      const deleteTodoButtons = document.querySelectorAll('button[name=todo-delete]') as NodeListOf<HTMLButtonElement>

      deleteTodoButtons.forEach(
        (deleteButton) =>
          (deleteButton.onclick = async (evt) => {
            const btn = evt.target as HTMLButtonElement
            const todo = JSON.parse(btn.getAttribute('data-todo'))

            await removeTodo({
              id: todo.id,
            })
            document.location.reload()
          }),
      )
    </script>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }

  button[name='todo-delete'],
  button#add-todo-button {
    background-color: var(--primary);
    color: #fff;
    border: 2px solid #000;
    cursor: pointer;
    padding: 4px;
    margin-left: 4px;
  }

  button#add-todo-button {
    background-color: var(--secondary);
  }

  li {
    margin-bottom: 10px;
  }
</style>
